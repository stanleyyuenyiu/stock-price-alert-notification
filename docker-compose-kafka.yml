version: "3.7"

x-container-common: &container-common
  networks:
    - vault

services:
  postgres:
    image: postgres:latest
    environment:
      #- POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    restart: always
    volumes:
      - "./data/postgres:/var/lib/postgresql/data"
    ports:
      - "5432:5432"

  # postgres:
  #  image: 'quay.io/debezium/example-postgres:2.0'
  #  container_name: postgres
  #  restart: always
  #  environment:
  #    - POSTGRES_DB=postgres
  #    - POSTGRES_USER=postgres
  #    - POSTGRES_PASSWORD=postgres
  #  ports:
  #    - "5432:5432"
  #  volumes:
  #    - db-data:/var/lib/postgresql/data

  # spark:
  #   image: docker.io/bitnami/spark:3
  #   user: root
  #   environment:
  #     - SPARK_MODE=master
  #     - SPARK_RPC_AUTHENTICATION_ENABLED=no
  #     - SPARK_RPC_ENCRYPTION_ENABLED=no
  #     - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
  #     - SPARK_SSL_ENABLED=no
  #     - SPARK_WORKER_CORES=1
  #     - SPARK_WORKER_MEMORY=1000m
  #   ports:
  #     - '8080:8080'
  #     - "7077:7077"
  #   volumes:
  #     - ./:/opt/bitnami/spark/py
  #     # - /opt/spark/conf/spark-defaults.conf:/opt/bitnami/spark/conf/spark-defaults.conf
  #     # - /opt/spark/jars:/opt/bitnami/spark/ivy:z

  # spark-worker-a:
  #   image: docker.io/bitnami/spark:3
  #   environment:
  #     - SPARK_MODE=worker
  #     - SPARK_MASTER_URL=spark:7077
  #     - SPARK_RPC_AUTHENTICATION_ENABLED=no
  #     - SPARK_RPC_ENCRYPTION_ENABLED=no
  #     - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
  #     - SPARK_SSL_ENABLED=no
  #   ports:
  #     - '8081:8081'
  #   depends_on:
  #     - spark

  kafdrop:
    image: obsidiandynamics/kafdrop
    restart: "no"
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:29092"
      JVM_OPTS: "-Xms16M -Xmx48M -Xss180K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify"
    depends_on:
      - "kafka"
  
  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.1
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  # debezium:
  #   image: debezium/connect
  #   container_name: debezium
  #   ports:
  #     - "8083:8083"
  #   links:
  #    - kafka
  #    - postgres
  #   environment:
  #     GROUP_ID: "foo"
  #     CONFIG_STORAGE_TOPIC: "my_connect_configs"
  #     OFFSET_STORAGE_TOPIC: "my_connect_offsets"
  #     STATUS_STORAGE_TOPIC: "my_connect_statuses"
  #     BOOTSTRAP_SERVERS: "kafka:29092"
  #   depends_on:
  #     - "zookeeper"
  #     - "kafka"
  #     - "postgres"

  
       
  kafka:
    image: confluentinc/cp-kafka:7.2.1
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_LISTENERS: "INTERNAL://:29092,EXTERNAL://:9092"
      KAFKA_ADVERTISED_LISTENERS: "INTERNAL://kafka:29092,EXTERNAL://localhost:9092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_ZOOKEEPER_SESSION_TIMEOUT: "6000"
      KAFKA_RESTART_ATTEMPTS: "10"
      KAFKA_RESTART_DELAY: "5"
      ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL: "0"
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
  
  schema-registry:
    image: confluentinc/cp-schema-registry:7.3.2
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - kafka
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

# volumes:
#   db-data:
#       driver: local
